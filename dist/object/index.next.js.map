{"version":3,"file":"index.next.js","sources":["../../src/converters/A1-Col-1.ts","../../src/converters/A1-Col-2.ts","../../src/converters/A1-Row.ts","../../src/converters/Col-A1.ts","../../src/converters/Row-A1.ts","../../src/validation/isValidA1.ts","../../src/validation/isValidNumber.ts","../../src/validation/A1Error.ts","../../src/index.ts"],"sourcesContent":["/**\n *\t@fileOverview Converts column letter to number\n *\t@author AdamL\n *\t@see https://stackoverflow.com/questions/21229180/convert-column-index-into-corresponding-column-letter\n *\t@param {string} col\n *\n *\t@return {number}\n */\nexport default function(col: string): number\n{\n\tlet column = 0,\n\t\tlength = col.length;\n\tfor(let i = 0; i < length; i++)\n\t\tcolumn += (col.charCodeAt(i) - 64) * Math.pow(26, length - i - 1);\n\treturn column;\n}","/**\n *\t@fileOverview Converts column letter to number\n *\t@author Flambino\n *\t@see https://codereview.stackexchange.com/questions/90112/a1notation-conversion-to-row-column-index\n *\t@param {string} col\n *\n *\t@return {number}\n */\nexport default function(col: string): number\n{\n\tlet i,\n\t\tl,\n\t\tchr,\n\t\tsum \t= 0,\n\t\tA \t\t= 'A'.charCodeAt(0),\n\t\tradix \t= 'Z'.charCodeAt(0) - A + 1;\n\tfor(i = 0, l = col.length; i < l; i++)\n\t{\n\t\tchr = col.charCodeAt(i);\n\t\tsum = sum * radix + chr - A + 1;\n\t}\n\treturn sum;\n}","/**\n *\t@fileOverview Converts row string to number\n *\t@param {string} row\n *\n *\t@return {number}\n */\nexport default function(row: string): number\n{\n\treturn parseInt(row, 10);\n}","/**\n *\t@fileOverview Converts column number to letter\n *\t@author AdamL\n *\t@see https://stackoverflow.com/questions/21229180/convert-column-index-into-corresponding-column-letter\n *\t@param {number} col\n *\n *\t@return {string}\n */\nexport default function(col: number): string\n{\n\tlet letter = '',\n\t\ttemp;\n\twhile(col > 0)\n\t{\n\t\ttemp \t= (col - 1) % 26;\n\t\tletter \t= String.fromCharCode(temp + 65) + letter;\n\t\tcol \t= (col - temp - 1) / 26;\n\t}\n\treturn letter;\n}","/**\n *\t@fileOverview Converts row number to string\n *\t@param {number} row\n *\n *\t@return {string}\n */\nexport default function(row: number): string\n{\n\treturn row.toString();\n}","/**\n *\t@fileOverview Checks validation\n *\t@param {string} a1\n *\n *\t@return {boolean}\n */\nexport default function(a1: string): boolean\n{\n\treturn /^[A-Z]+\\d+(:[A-Z]+\\d+)?$/i.test(a1);\n}","/**\n *\t@fileOverview Checks number validation\n *\t@param {T} n\n *\t@param {boolean} [strict = true]\n *\n *\t@return {boolean}\n */\nexport default function <T>(n: T, strict: boolean = true): boolean {\n  let isNumber = typeof n === \"number\" && n % 1 === 0;\n  return strict ? isNumber && +n > 0 : isNumber;\n}\n","/**\n *\t@fileOverview A1 notation errors\n */\nexport default class A1Error<T> extends Error\n{\n\tconstructor(a1: string)\n\tconstructor(col: number)\n\tconstructor(row: number)\n\tconstructor(unknown?: T)\n\tconstructor(something?: string | number | T)\n\t{\n\t\tlet str = JSON.stringify(something);\n\t\tsuper(str);\n\t\tthis.name \t\t= 'A1Error';\n\t\tthis.message \t= str;\n\t}\n\n\twasString(): A1Error<T>\n\t{\n\t\tthis.message = `Invalid A1 notation: ${this.message}`;\n\t\treturn this;\n\t}\n\n\twasNumber(): A1Error<T>\n\t{\n\t\tthis.message = `Invalid A1 number(s): ${this.message}`;\n\t\treturn this;\n\t}\n\n\twasUnknown(): A1Error<T>\n\t{\n\t\tthis.message = `Invalid A1 argument(s): ${this.message}`;\n\t\treturn this;\n\t}\n}","/**\n *\t@fileOverview Math operations and converting in A1 notation\n *\tSupports A1 notation like \"A1\" and \"A1:B2\"\n *\t@author FLighter\n */\n\nimport A1Col1 from \"./converters/A1-Col-1\"; // converter 1\nimport A1Col2 from \"./converters/A1-Col-2\"; // converter 2\nimport A1Row from \"./converters/A1-Row\";\nimport ColA1 from \"./converters/Col-A1\";\nimport RowA1 from \"./converters/Row-A1\";\nimport isValidA1 from \"./validation/isValidA1\";\nimport isValidNumber from \"./validation/isValidNumber\";\nimport A1Error from \"./validation/A1Error\";\nimport options from \"./options/options\";\nimport advancedOptions from \"./options/advancedOptions\";\n\nexport class A1 {\n  // Regular expression for parsing\n  private static _reg: RegExp = /^([A-Z]+)(\\d+)(?::([A-Z]+)(\\d+))?$/;\n  /**\n   *\tExample: A1:B2\n   */\n  private _colStart: number = 0; // A -> 1\n  private _rowStart: number = 0; // 1 -> 1\n  private _colEnd: number = 0; // B -> 2\n  private _rowEnd: number = 0; // 2 -> 2\n  private _converter: 1 | 2 = 1; // converter 1 | 2\n\n  /**\n   *\tParses A1 notation\n   *\t@param {string} a1\n   *\t@param {1 | 2}  converter\n   *\n   *\t@return {object} {cs: number, rs: number, ce: number, re: number}\n   */\n  private static _parse(\n    a1: string,\n    converter: 1 | 2\n  ): { cs: number; rs: number; ce: number; re: number } {\n    let [\n      ,\n      cs, // col start // A\n      rs, // row start // 1\n      ce, // col end \t// B\n      re // row end \t// 2\n    ] = a1.toUpperCase().match(this._reg);\n    ce = ce || cs;\n    re = re || rs;\n    let colStart = this._A1Col(cs, converter),\n      colEnd = this._A1Col(ce, converter),\n      rowStart = A1Row(rs),\n      rowEnd = A1Row(re);\n    // For non-standard A1\n    return {\n      cs: colEnd > colStart ? colStart : colEnd,\n      rs: rowEnd > rowStart ? rowStart : rowEnd,\n      ce: colEnd > colStart ? colEnd : colStart,\n      re: rowEnd > rowStart ? rowEnd : rowStart\n    };\n  }\n  /**\n   *\tConverts column letter to number using converter 1 or 2\n   *\t@param {string} a1\n   *\t@param {1 | 2} converter\n   *\n   *\t@return {number}\n   */\n  private static _A1Col(a1: string, converter: 1 | 2): number {\n    return converter === 1 ? A1Col1(a1) : A1Col2(a1);\n  }\n\n  /******************\n   *\tSTATIC METHODS\n   ******************/\n  /**\n   *\tChecks A1 notation\n   *\t@param {string} a1\n   *\n   *\t@return {boolean}\n   */\n  static isValid(a1: string): boolean {\n    return isValidA1(a1);\n  }\n  /**\n   *\tConverts the first column letter from A1 to number\n   *\t@param {string} a1\n   *\t@param {1 | 2} [converter = 1]\n   *\n   *\t@return {number}\n   */\n  static getCol(a1: string, converter: 1 | 2 = 1): number {\n    if (!isValidA1(a1)) throw new A1Error(a1).wasString();\n    return this._parse(a1, converter).cs;\n  }\n  /**\n   *\tConverts the last column letter from A1 to number\n   *\t@param {string} a1\n   *\t@param {1 | 2} [converter = 1]\n   *\n   *\t@return {number}\n   */\n  static getLastCol(a1: string, converter: 1 | 2 = 1): number {\n    if (!isValidA1(a1)) throw new A1Error(a1).wasString();\n    return this._parse(a1, converter).ce;\n  }\n  /**\n   *\tConverts number to column letter in A1\n   *\t@param {number} col\n   *\n   *\t@return {string}\n   */\n  static toCol(col: number): string {\n    if (!isValidNumber(col)) throw new A1Error(col).wasNumber();\n    return ColA1(col);\n  }\n  /**\n   *\tConverts the first row string to number\n   *\t@param {string} a1\n   *\n   *\t@return {number}\n   */\n  static getRow(a1: string): number {\n    if (!isValidA1(a1)) throw new A1Error(a1).wasString();\n    return this._parse(a1, 1).rs;\n  }\n  /**\n   *\tConverts the last row string to number\n   *\t@param {string} a1\n   *\n   *\t@return {number}\n   */\n  static getLastRow(a1: string): number {\n    if (!isValidA1(a1)) throw new A1Error(a1).wasString();\n    return this._parse(a1, 1).re;\n  }\n  /**\n   *\tConverts number to row string in A1\n   *\t@param {number} row\n   *\n   *\t@return {string}\n   */\n  static toRow(row: number): string {\n    if (!isValidNumber(row)) throw new A1Error(row).wasNumber();\n    return RowA1(row);\n  }\n  /**\n   *\t@param {string} a1\n   *\t@param {1 | 2} [converter = 1]\n   *\n   *\t@return {number} columns count\n   */\n  static getWidth(a1: string, converter: 1 | 2 = 1): number {\n    if (!isValidA1(a1)) throw new A1Error(a1).wasString();\n    let { ce, cs } = this._parse(a1, converter);\n    return ce - cs + 1;\n  }\n  /**\n   *\t@param {string} a1\n   *\n   *\t@return {number} rows count\n   */\n  static getHeight(a1: string): number {\n    if (!isValidA1(a1)) throw new A1Error(a1).wasString();\n    let { re, rs } = this._parse(a1, 1);\n    return re - rs + 1;\n  }\n\n  /***************\n   *\tCONSTRUCTOR\n   ***************/\n  /**\n   *\tIt handles case:\n   *\tconstructor(object: options)\n   *\t@param {options[]} args\n   */\n  private _initObject(...args: options[]): void {\n    const isString = <T>(some: T) => typeof some === \"string\",\n      areEmpty = (all: advancedOptions, excludingKeys: string | string[]) => {\n        !Array.isArray(excludingKeys) && (excludingKeys = [excludingKeys]);\n        for (let key in all)\n          if (excludingKeys.indexOf(key) === -1 && all[key].val) return false;\n        return true;\n      };\n    let options = args[0],\n      { converter } = options;\n    if (converter && [1, 2].indexOf(converter) === -1)\n      throw new A1Error({ converter }).wasUnknown();\n    this._converter = converter || 1;\n    // Create object with types\n    let all: advancedOptions = {};\n    [\n      \"colStart\",\n      \"rowStart\",\n      \"colEnd\",\n      \"rowEnd\",\n      \"a1Start\",\n      \"a1End\",\n      \"nCols\",\n      \"nRows\"\n    ].forEach(key => {\n      let val = options[key];\n      all[key] = {\n        isString: isString(val),\n        isNumber: isValidNumber(val),\n        val\n      };\n    });\n    let {\n      colStart,\n      rowStart,\n      colEnd,\n      rowEnd,\n      a1Start,\n      a1End,\n      nCols,\n      nRows\n    } = all;\n    /**\n     *\tExecuting by priority\n     */\n    switch (true) {\n      /**\n       *\ta1Start\n       */\n      case a1Start.isString && areEmpty(all, \"a1Start\"):\n        return this._initString(a1Start.val as string);\n      /**\n       *\ta1Start, a1End\n       */\n      case a1Start.isString &&\n        a1End.isString &&\n        areEmpty(all, [\"a1Start\", \"a1End\"]):\n        return this._initString(a1Start.val as string, a1End.val as string);\n      /**\n       *\tcolStart, rowStart (string, string)\n       */\n      case colStart.isString &&\n        rowStart.isString &&\n        areEmpty(all, [\"colStart\", \"rowStart\"]):\n        return this._initString(colStart.val + (rowStart.val as string));\n      /**\n       *\tcolStart, rowStart (number, number)\n       */\n      case colStart.isNumber &&\n        rowStart.isNumber &&\n        areEmpty(all, [\"colStart\", \"rowStart\"]):\n        return this._initNumber(colStart.val as number, rowStart.val as number);\n      /**\n       *\tcolStart, rowStart, nRows (number, number, number)\n       */\n      case colStart.isNumber &&\n        rowStart.isNumber &&\n        nRows.isNumber &&\n        areEmpty(all, [\"colStart\", \"rowStart\", \"nRows\"]):\n        return this._initNumber(\n          colStart.val as number,\n          rowStart.val as number,\n          nRows.val as number\n        );\n      /**\n       *\tcolStart, rowStart, nCols (number, number, number)\n       */\n      case colStart.isNumber &&\n        rowStart.isNumber &&\n        nCols.isNumber &&\n        areEmpty(all, [\"colStart\", \"rowStart\", \"nCols\"]):\n        return this._initNumber(\n          colStart.val as number,\n          rowStart.val as number,\n          1,\n          nCols.val as number\n        );\n      /**\n       *\tcolStart, rowStart, nRows, nCols (number, number, number, number)\n       */\n      case colStart.isNumber &&\n        rowStart.isNumber &&\n        nRows.isNumber &&\n        nCols.isNumber &&\n        areEmpty(all, [\"colStart\", \"rowStart\", \"nRows\", \"nCols\"]):\n        return this._initNumber(\n          colStart.val as number,\n          rowStart.val as number,\n          nRows.val as number,\n          nCols.val as number\n        );\n      /**\n       *\tcolStart, rowStart, colEnd (string, string, string)\n       */\n      case colStart.isString &&\n        rowStart.isString &&\n        colEnd.isString &&\n        areEmpty(all, [\"colStart\", \"rowStart\", \"colEnd\"]):\n        return this._initString(\n          `${colStart.val}${rowStart.val}:${colEnd.val}${rowStart.val}`\n        );\n      /**\n       *\tcolStart, rowStart, colEnd (number, number, number)\n       */\n      case colStart.isNumber &&\n        rowStart.isNumber &&\n        colEnd.isNumber &&\n        areEmpty(all, [\"colStart\", \"rowStart\", \"colEnd\"]):\n        return this._initNumber(\n          colStart.val as number,\n          rowStart.val as number,\n          1,\n          (colEnd.val as number) - (colStart.val as number) + 1\n        );\n      /**\n       *\tcolStart, rowStart, rowEnd (string, string, string)\n       */\n      case colStart.isString &&\n        rowStart.isString &&\n        rowEnd.isString &&\n        areEmpty(all, [\"colStart\", \"rowStart\", \"rowEnd\"]):\n        return this._initString(\n          `${colStart.val}${rowStart.val}:${colStart.val}${rowEnd.val}`\n        );\n      /**\n       *\tcolStart, rowStart, rowEnd (number, number, number)\n       */\n      case colStart.isNumber &&\n        rowStart.isNumber &&\n        rowEnd.isNumber &&\n        areEmpty(all, [\"colStart\", \"rowStart\", \"rowEnd\"]):\n        return this._initNumber(\n          colStart.val as number,\n          rowStart.val as number,\n          (rowEnd.val as number) - (rowStart.val as number) + 1\n        );\n      /**\n       *\tcolStart, rowStart, colEnd, rowEnd (string, string, string, string)\n       */\n      case colStart.isString &&\n        rowStart.isString &&\n        colEnd.isString &&\n        rowEnd.isString &&\n        areEmpty(all, [\"colStart\", \"rowStart\", \"colEnd\", \"rowEnd\"]):\n        return this._initString(\n          `${colStart.val}${rowStart.val}:${colEnd.val}${rowEnd.val}`\n        );\n      /**\n       *\tcolStart, rowStart, colEnd, rowEnd (number, number, number, number)\n       */\n      case colStart.isNumber &&\n        rowStart.isNumber &&\n        colEnd.isNumber &&\n        rowEnd.isNumber &&\n        areEmpty(all, [\"colStart\", \"rowStart\", \"colEnd\", \"rowEnd\"]):\n        return this._initNumber(\n          colStart.val as number,\n          rowStart.val as number,\n          (rowEnd.val as number) - (rowStart.val as number) + 1,\n          (colEnd.val as number) - (colStart.val as number) + 1\n        );\n      /**\n       *\tInvalid arguments combination\n       */\n      default:\n        throw new A1Error(options).wasUnknown();\n    }\n  }\n  /**\n   *\tIt handles cases:\n   *\tconstructor(col: number, row: number)\n   *\tconstructor(col: number, row: number, nRows: number)\n   *\tconstructor(col: number, row: number, nRows: number, nCols: number)\n   *\t@param {number[]} args\n   */\n  private _initNumber(...args: number[]): void {\n    let [col, row, nRows, nCols] = args;\n    nRows = nRows || 1;\n    nCols = nCols || 1;\n    let all = [col, row, nRows, nCols];\n    if (!all.every(n => isValidNumber(n)))\n      throw new A1Error(all.join(\", \")).wasNumber();\n    this._colStart = col; // the first col\n    this._rowStart = row; // the first row\n    this._colEnd = col + nCols - 1; // how many cols in total (cols length)\n    this._rowEnd = row + nRows - 1; // how many rows in total (rows length)\n  }\n  /**\n   *\tIt handles cases:\n   *\tconstructor(range: string)\n   *\tconstructor(rangeStart: string, rangeEnd: string)\n   *\t@param {string[]} args\n   */\n  private _initString(...args: string[]): void {\n    let [rangeStart, rangeEnd] = args,\n      range = rangeEnd\n        ? `${rangeStart}:${rangeEnd}` // rangeStart: string, rangeEnd: string\n        : rangeStart; // range: string\n    if (!isValidA1(range)) throw new A1Error(range).wasString();\n    let { cs, rs, ce, re } = A1._parse(range, this._converter);\n    this._colStart = cs;\n    this._rowStart = rs;\n    this._colEnd = ce;\n    this._rowEnd = re;\n  }\n  /**\n   *\tConstructor\n   */\n  constructor(object: options);\n  constructor(range: string);\n  constructor(rangeStart: string, rangeEnd: string);\n  constructor(col: number, row: number);\n  constructor(col: number, row: number, nRows: number);\n  constructor(col: number, row: number, nRows: number, nCols: number);\n  constructor(\n    something: string | number | options,\n    something2?: string | number,\n    nRows?: number,\n    nCols?: number\n  ) {\n    // No arguments\n    if (!arguments.length) throw new A1Error().wasUnknown();\n    let type = typeof something;\n    // Object\n    if (something && type === \"object\") this._initObject.apply(this, arguments);\n    // Number\n    else if (type === \"number\") this._initNumber.apply(this, arguments);\n    // String\n    else if (type === \"string\") this._initString.apply(this, arguments);\n    // Unknown argument\n    else throw new A1Error(something).wasUnknown();\n  }\n\n  /***********\n   *\tMETHODS\n   ***********/\n  /**\n   *\t@return {string} in A1 notation\n   */\n  get(): string {\n    let start = ColA1(this._colStart) + RowA1(this._rowStart),\n      end = ColA1(this._colEnd) + RowA1(this._rowEnd);\n    return start === end ? start : `${start}:${end}`;\n  }\n  /**\n   *\t@return {string} in A1 notation\n   */\n  toString(): string {\n    return this.get();\n  }\n  /**\n   *\t@typedef {Object} Result\n   *\t@property {number} colStart\n   *\t@property {number} rowStart\n   *\t@property {number} colEnd\n   *\t@property {number} rowEnd\n   *\t@property {string} a1\n   *\t@property {number} rowsCount\n   *\t@property {number} colsCount\n   *\n   *\t@return {Result} full information about range\n   */\n  toJSON(): {\n    colStart: number;\n    rowStart: number;\n    colEnd: number;\n    rowEnd: number;\n    a1: string;\n    rowsCount: number;\n    colsCount: number;\n  } {\n    return {\n      colStart: this._colStart,\n      rowStart: this._rowStart,\n      colEnd: this._colEnd,\n      rowEnd: this._rowEnd,\n      a1: this.get(),\n      rowsCount: this._rowEnd - this._rowStart + 1,\n      colsCount: this._colEnd - this._colStart + 1\n    };\n  }\n  /**\n   *\t@return {number} start column\n   */\n  getCol(): number {\n    return this._colStart;\n  }\n  /**\n   *\t@return {number} end column\n   */\n  getLastCol(): number {\n    return this._colEnd;\n  }\n  /**\n   *\t@return {number} start row\n   */\n  getRow(): number {\n    return this._rowStart;\n  }\n  /**\n   *\t@return {number} end row\n   */\n  getLastRow(): number {\n    return this._rowEnd;\n  }\n  /**\n   *\t@return {number} columns count\n   */\n  getWidth(): number {\n    return this._colEnd - this._colStart + 1;\n  }\n  /**\n   *\t@return {number} rows count\n   */\n  getHeight(): number {\n    return this._rowEnd - this._rowStart + 1;\n  }\n  /**\n   *\t@return {A1} copy of this object\n   */\n  copy(): A1 {\n    return new A1(this.get());\n  }\n  /**\n   *\tAdds N cells to range along the x-axis\n   *\tif count >= 0 - adds to right\n   *\tif count <  0 - adds to left\n   *\t@param {number} count\n   *\n   *\t@return {this}\n   */\n  addX(count: number): this {\n    if (!isValidNumber(count, false)) throw new A1Error(count).wasUnknown();\n    count >= 0 ? (this._colEnd += count) : (this._colStart += count);\n    this._colStart <= 0 && (this._colStart = 1);\n    return this;\n  }\n  /**\n   *\tAdds N cells to range along the y-axis\n   *\tif count >= 0 - adds to bottom\n   *\tif count <  0 - adds to top\n   *\t@param {number} count\n   *\n   *\t@return {this}\n   */\n  addY(count: number): this {\n    if (!isValidNumber(count, false)) throw new A1Error(count).wasUnknown();\n    count >= 0 ? (this._rowEnd += count) : (this._rowStart += count);\n    this._rowStart <= 0 && (this._rowStart = 1);\n    return this;\n  }\n  /**\n   *\tAdds N cells to range along the x/y-axis\n   *\t@param {number} countX\n   *\t@param {number} countY\n   *\n   *\t@return {this}\n   */\n  add(countX: number, countY: number): this {\n    this.addX(countX);\n    this.addY(countY);\n    return this;\n  }\n  /**\n   *\tRemoves N cells from range along the x-axis\n   *\tif count >= 0 - removes from right\n   *\tif count <  0 - removes from left\n   *\t@param {number} count\n   *\n   *\t@return {this}\n   */\n  removeX(count: number): this {\n    if (!isValidNumber(count, false)) throw new A1Error(count).wasUnknown();\n    if (count >= 0) {\n      this._colEnd -= count;\n      this._colEnd < this._colStart && (this._colEnd = this._colStart);\n    } else {\n      this._colStart -= count;\n      this._colStart > this._colEnd && (this._colStart = this._colEnd);\n    }\n    return this;\n  }\n  /**\n   *\tRemoves N cells from range along the y-axis\n   *\tif count >= 0 - removes from bottom\n   *\tif count <  0 - removes from top\n   *\t@param {number} count\n   *\n   *\t@return {this}\n   */\n  removeY(count: number): this {\n    if (!isValidNumber(count, false)) throw new A1Error(count).wasUnknown();\n    if (count >= 0) {\n      this._rowEnd -= count;\n      this._rowEnd < this._rowStart && (this._rowEnd = this._rowStart);\n    } else {\n      this._rowStart -= count;\n      this._rowStart > this._rowEnd && (this._rowStart = this._rowEnd);\n    }\n    return this;\n  }\n  /**\n   *\tRemoves N cells from range along the x/y-axis\n   *\t@param {number} countX\n   *\t@param {number} countY\n   *\n   *\t@return {this}\n   */\n  remove(countX: number, countY: number): this {\n    this.removeX(countX);\n    this.removeY(countY);\n    return this;\n  }\n  /**\n   *\tShifts the range along the x-axis\n   *\tIf offset >= 0 - shifts to right\n   *\tIf offset <  0 - shifts to left\n   *\t@param {number} offset\n   *\n   *\t@return {this}\n   */\n  shiftX(offset: number): this {\n    if (!isValidNumber(offset, false)) throw new A1Error(offset).wasUnknown();\n    let diff = this._colEnd - this._colStart,\n      start = this._colStart + offset,\n      end = this._colEnd + offset;\n    this._colStart = start > 0 ? start : 1;\n    this._colEnd = start > 0 ? end : diff + 1;\n    return this;\n  }\n  /**\n   *\tShifts the range along the y-axis\n   *\tIf offset >= 0 - shifts to bottom\n   *\tIf offset <  0 - shifts to top\n   *\t@param {number} offset\n   *\n   *\t@return {this}\n   */\n  shiftY(offset: number): this {\n    if (!isValidNumber(offset, false)) throw new A1Error(offset).wasUnknown();\n    let diff = this._rowEnd - this._rowStart,\n      start = this._rowStart + offset,\n      end = this._rowEnd + offset;\n    this._rowStart = start > 0 ? start : 1;\n    this._rowEnd = start > 0 ? end : diff + 1;\n    return this;\n  }\n  /**\n   *\tShifts the range along the x/y-axis\n   *\t@param {number} offsetX\n   *\t@param {number} offsetY\n   *\n   *\t@return {this}\n   */\n  shift(offsetX: number, offsetY: number): this {\n    this.shiftX(offsetX);\n    this.shiftY(offsetY);\n    return this;\n  }\n}\n"],"names":[],"mappings":"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"}